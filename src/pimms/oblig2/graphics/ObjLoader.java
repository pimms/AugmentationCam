package pimms.oblig2.graphics;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import android.content.Context;
import android.content.res.AssetManager;
import android.nfc.FormatException;
import android.util.Log;

/*
 * Class to load Polygon File Format files.
 * 
 * It's very important to notice that not all PLY-files
 * are possible to load. This implementation primarily
 * focuses on supporting PLY-files generated by Blender.
 * 
 * Some assumptions regarding input files:
 * 	1.	XYZ is the only valid order for axes. 
 * 		"YXZ", "XY", "Z" and similar are NOT supported.
 * 		
 * 	2.	All vertex data must be bundled. Normals and texture 
 * 		coordinates must be defined in the same list as vertices.
 * 		Vertex indices 
 * 
 *  3.	Types are ignored, and casted to float .
 */
public class ObjLoader {
	private static final String TAG = "3dOBJ";
	private Scanner mFileScanner;
	
	// TODO:
	// Conversion to a single array is inefficient.
	// If time allows it, improve this.
	private ArrayList<float[]> mVertices;
	private ArrayList<int[]> mFaces;
	
	public ObjLoader() {
		mVertices = new ArrayList<float[]>();
		mFaces = new ArrayList<int[]>();
	}
	
	public boolean parseFile(String fileName, Context context) {
		// hehehehehehehehehehehehehehehe 
		AssetManager assManager = context.getAssets();
		
		try {
			mFileScanner = new Scanner(assManager.open(fileName, AssetManager.ACCESS_STREAMING));
		} catch (Exception ex) {
			Log.e(TAG, "Failed to open file " + fileName);
			return false;
		}
		
		try {
			while (mFileScanner.hasNextLine()) {
				parseLine();
			}
		} catch (FormatException e) {
			Log.e(TAG, "Invalid format in OBJ-file: " + e.getMessage());
			return false;
		}
		
		Log.d(TAG, "Loaded OBJ-model with " + mVertices.size() + " vertices");
		
		return true;
	}
	
	public float[] getVertices() {
		// drawElements is not currently supported. Generate an 
		// array containing redundant elements ready to be drawn
		// using drawArrays.
		
		// Calculate the total amount of vertices
		int length = 0;
		for (int i=0; i<mFaces.size(); i++) {
			int faceLength = mFaces.get(i).length;
			if (faceLength == 4) {
				faceLength *= 1.5f;
			}
			
			length += faceLength;
		}
		
		float[] verts = new float[length * 3];
		
		// Build our newly created (and ridonculously awesome) array
		int idx = 0;
		for (int i=0; i<mFaces.size(); i++) {
			int[] face = mFaces.get(i);
			
			if (face.length == 3) {
				for (int j=0; j<3; j++) {
					float[] vert = mVertices.get(face[j]-1);
					for (int k=0; k<3; k++) {
						verts[idx++] = vert[k];
					}
				}
			} else if (face.length == 4) {
				// Convert 4-vertex-faced on the form 
				// {0,1,2,3} to {0,1,2}{0,2,3}
				for (int j=0; j<2; j++) {
					for (int k=0; k<4; k++) {
						// Nasty hack 
						if (j == 0 && k == 3) continue;
						if (j == 1 && k == 1) continue;
						
						float[] vert = mVertices.get(face[k]-1);
						for (int l=0; l<3; l++) {
							verts[idx++] = vert[l];
						}
					}
				}
			}
		}
		
		return verts;
	}
	
	public int[] getIndices() {
		return null;
	}
	
	public float[] getTexCoords() {
		return null;
	}
	
	private void parseLine() throws FormatException {
		String next = mFileScanner.next();
		
		if (next.equals("v")) {
			parseVertex();
		} else if (next.equals("f")) {
			parseFace();
		} else {
			Log.d(TAG, "Discarding: (" + next + ") " + mFileScanner.nextLine());
		}
	}
	
	private void parseVertex() throws FormatException {
		float[] vert = new float[3];
		for (int i=0; i<3; i++) {
			vert[i] = Float.parseFloat(mFileScanner.next());
		}
		
		mVertices.add(vert);
	}
	
	private void parseFace() throws FormatException {
		String line = mFileScanner.nextLine();
		String[] indices = line.replaceFirst("^ ", "").split(" ");
		
		if (indices.length != 3 && indices.length != 4) {
			//throw new FormatException("Very unable to build a face from "+indices.length+" vertices");
			return;
		}
		
		int[] face = new int[indices.length];
		for (int i=0; i<indices.length; i++) {
			face[i] = Integer.parseInt(indices[i]);
		}
		
		mFaces.add(face);
	}
}
































